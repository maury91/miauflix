name: Test and Publish Docker Images

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Run all tests first - Docker image will only be built and published if tests pass
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build -w packages/yts-sanitizer

      - name: Install E2E test dependencies
        run: npm ci
        working-directory: backend-e2e

      - name: Create environment file for tests
        run: |
          cat > .env << EOF
          # Mock API keys for testing
          TMDB_API_ACCESS_TOKEN=mock-tmdb-token-for-testing
          TRAKT_CLIENT_ID=mock-trakt-client-id
          TRAKT_CLIENT_SECRET=mock-trakt-client-secret
          JWT_SECRET=mock-jwt-secret-for-testing-only
          REFRESH_TOKEN_SECRET=mock-refresh-token-secret-for-testing
          EOF

      - name: Run backend unit tests
        run: npm run test:backend
        env:
          NODE_ENV: test
          HTTP_VCR_MODE: replay
          TMDB_API_KEY: mock-api-key

      - name: Run backend e2e tests
        run: npm run test:backend:e2e
        env:
          NODE_ENV: test
        timeout-minutes: 10

  # Build and publish Docker image only after all tests pass
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ✅ Docker image published successfully
        if: github.event_name != 'pull_request'
        run: |
          echo "🐳 Docker image has been built and published to the registry"
          echo "📋 Tags: ${{ steps.meta-backend.outputs.tags }}"
          echo "✅ All tests passed before publishing!"
