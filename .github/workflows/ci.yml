name: CI Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build:all

      - name: Check TypeScript
        run: npm run check:ts

      - name: Lint
        run: npm run lint

      - name: Format check
        run: npm run format:check

  test:
    runs-on: ubuntu-latest
    needs: lint-and-type-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build:all:backend

      - name: Run tests
        run: npm run test:backend
        env:
          NODE_ENV: test
          # Force HTTP_VCR_MODE to replay mode only - no network requests
          HTTP_VCR_MODE: replay
          # Mock API keys - not real credentials needed
          TMDB_API_KEY: mock-api-key

  e2e-tests:
    runs-on: ubuntu-latest
    needs: lint-and-type-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install E2E test dependencies
        run: npm ci
        working-directory: backend-e2e

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx -w frontend playwright install --with-deps chromium
        env:
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

      - name: Verify Playwright installation
        id: verify-playwright
        run: npx -w frontend playwright --version
        env:
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

      - name: Run E2E tests
        run: npm run test:e2e
        if: steps.verify-playwright.outcome == 'success'
        env:
          NODE_ENV: test
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
        timeout-minutes: 10

      - name: Build frontend
        run: npm run build:frontend
        if: steps.verify-playwright.outcome == 'success'
        env:
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

      - name: Run visual tests
        run: touch ../.env && npm run test:frontend:visual
        env:
          NODE_ENV: test
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
        timeout-minutes: 10

      - name: Upload E2E test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-logs
          path: |
            backend-e2e/admin-credentials.json
            backend-e2e/logs/*.log
            backend-e2e/logs/traces/*.log
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            frontend/playwright-report/
            frontend/test-results/
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload visual test screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-failures
          path: frontend/test-results/
          if-no-files-found: ignore
          retention-days: 7

  # Disabled until we are ready for production
  # build-and-push:
  # runs-on: ubuntu-latest
  # needs: test
  # permissions:
  #   contents: read
  #   packages: write

  # steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Log in to Container Registry
  #     if: github.event_name != 'pull_request'
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ${{ env.REGISTRY }}
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Extract metadata for backend
  #     id: meta-backend
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #       tags: |
  #         type=ref,event=branch
  #         type=ref,event=pr
  #         type=semver,pattern={{version}}
  #         type=semver,pattern={{major}}.{{minor}}
  #         type=semver,pattern={{major}}
  #         type=raw,value=latest,enable={{is_default_branch}}
  #         type=sha,prefix={{branch}}-

  #   - name: Build and push backend Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       file: ./Dockerfile
  #       platforms: linux/amd64,linux/arm64
  #       push: ${{ github.event_name != 'pull_request' }}
  #       tags: ${{ steps.meta-backend.outputs.tags }}
  #       labels: ${{ steps.meta-backend.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  #   - name: ‚úÖ Docker image published successfully
  #     if: github.event_name != 'pull_request'
  #     run: |
  #       echo "üê≥ Docker image has been built and published to the registry"
  #       echo "üìã Tags: ${{ steps.meta-backend.outputs.tags }}"
  #       echo "‚úÖ All tests passed before publishing!"
