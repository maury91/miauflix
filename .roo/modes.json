{
  "custom_modes": {
    "third-party-integration": {
      "name": "üîå Third-Party Integration",
      "description": "Specialized mode for integrating new external APIs with http-vcr testing workflow",
      "capabilities": [
        "api_integration_design",
        "http_vcr_workflow_management",
        "fixture_generation_and_analysis",
        "data_transformer_creation",
        "content_neutralization"
      ],
      "workflow": {
        "steps": [
          "analyze_api_documentation",
          "create_api_client_with_types",
          "write_test_with_real_api_call",
          "run_test_to_generate_fixtures",
          "analyze_fixture_data_structure",
          "create_data_transformers",
          "implement_neutral_data_patterns",
          "verify_integration_compliance"
        ]
      },
      "file_patterns": {
        "allowed": [
          "backend/src/content-directories/**/*.ts",
          "backend/src/content-directories/**/*.test.ts",
          "backend/src/utils/api.util.ts",
          "backend/src/utils/fetch.util.ts",
          "backend/src/types/**/*.ts",
          "backend/src/services/**/*.ts",
          "backend/test-fixtures/**/*.json",
          "backend-e2e/**/*.ts",
          "packages/**/*.ts"
        ]
      },
      "tools": {
        "http_vcr": {
          "fixture_path": "backend/test-fixtures",
          "analysis_required": true,
          "neutralization_required": true
        },
        "api_testing": {
          "real_api_calls": "development_only",
          "fixture_playback": "ci_and_production"
        }
      },
      "compliance": {
        "data_neutralization": true,
        "copyright_protection": true,
        "relationship_preservation": true
      }
    },
    "media-streaming": {
      "name": "üé¨ Media Streaming",
      "description": "Specialized mode for content directory and torrent handling features",
      "capabilities": [
        "content_directory_management",
        "torrent_integration",
        "streaming_optimization",
        "metadata_extraction",
        "quality_assessment"
      ],
      "workflow": {
        "focus_areas": [
          "content_source_integration",
          "streaming_performance",
          "metadata_enrichment",
          "quality_extraction",
          "chunk_store_optimization"
        ]
      },
      "file_patterns": {
        "allowed": [
          "backend/src/content-directories/**/*.ts",
          "backend/src/chunk-stores/**/*.ts",
          "backend/src/utils/source-metadata/**/*.ts",
          "backend/src/services/source/**/*.ts",
          "backend/src/services/source-metadata/**/*.ts",
          "backend/src/entities/movie*.entity.ts",
          "backend/src/entities/tvshow.entity.ts",
          "backend/src/entities/episode.entity.ts",
          "backend/src/entities/season.entity.ts",
          "backend/src/types/webtorrent.d.ts"
        ]
      },
      "performance_focus": {
        "streaming_optimization": true,
        "background_processing": true,
        "chunk_management": true,
        "metadata_caching": true
      },
      "integrations": {
        "webtorrent": true,
        "fs_chunk_store": true,
        "quality_detection": true,
        "codec_analysis": true
      }
    },
    "security-audit": {
      "name": "üõ°Ô∏è Security Reviewer",
      "description": "Specialized mode for authentication, encryption, and security compliance features",
      "capabilities": [
        "authentication_flow_analysis",
        "encryption_implementation",
        "security_middleware_review",
        "audit_logging_implementation",
        "rate_limiting_configuration"
      ],
      "workflow": {
        "security_checks": [
          "authentication_vulnerabilities",
          "encryption_standards",
          "rate_limiting_effectiveness",
          "audit_trail_completeness",
          "data_protection_compliance"
        ]
      },
      "file_patterns": {
        "allowed": [
          "backend/src/middleware/auth.middleware.ts",
          "backend/src/middleware/audit-log.middleware.ts",
          "backend/src/middleware/rate-limit.middleware.ts",
          "backend/src/entities/user.entity.ts",
          "backend/src/entities/refresh-token.entity.ts",
          "backend/src/entities/trakt-user.entity.ts",
          "backend/src/entities/audit-log.entity.ts",
          "backend/src/errors/auth.errors.ts",
          "backend/src/services/auth/**/*.ts",
          "backend-e2e/auth/**/*.ts"
        ]
      },
      "security_standards": {
        "authentication": "jwt_with_refresh_tokens",
        "encryption": "aes_256_gcm",
        "rate_limiting": "sliding_window",
        "audit_logging": "comprehensive",
        "data_protection": "gdpr_compliant"
      },
      "compliance_checks": {
        "owasp_top_10": true,
        "data_protection": true,
        "streaming_security": true,
        "api_security": true
      }
    },
    "docker-e2e": {
      "name": "üê≥ Docker E2E",
      "description": "Specialized mode for Docker compose testing workflows and container management",
      "capabilities": [
        "docker_compose_lifecycle_management",
        "e2e_test_orchestration",
        "container_health_monitoring",
        "service_integration_testing",
        "environment_consistency_validation"
      ],
      "workflow": {
        "lifecycle_steps": [
          "docker_compose_validation",
          "service_startup_orchestration",
          "health_check_verification",
          "e2e_test_execution",
          "cleanup_and_teardown"
        ]
      },
      "file_patterns": {
        "allowed": [
          "docker-compose.*.yml",
          "backend-e2e/**/*.ts",
          "backend-e2e/**/*.sh",
          "backend-e2e/**/*.Dockerfile",
          "scripts/docker-*.sh",
          "backend/src/**/*.test.ts"
        ]
      },
      "docker_management": {
        "compose_file_validation": true,
        "service_dependency_tracking": true,
        "health_check_implementation": true,
        "resource_cleanup": true,
        "background_process_management": true
      },
      "testing_patterns": {
        "integration_tests": "docker_compose_up",
        "service_communication": "container_networking",
        "data_persistence": "volume_mapping",
        "environment_isolation": "per_test_cleanup"
      },
      "commands": {
        "start_e2e_env": "npm run start:backend:e2e",
        "run_e2e_tests": "npm run test:backend:e2e",
        "run_dev_tests": "npm run test:backend:e2e:dev",
        "docker_cleanup": "npm run docker:cleanup"
      }
    }
  },
  "mode_relationships": {
    "third-party-integration": {
      "complements": ["security-audit", "docker-e2e"],
      "requires": ["media-streaming"]
    },
    "media-streaming": {
      "complements": ["third-party-integration", "security-audit"],
      "foundation_for": ["docker-e2e"]
    },
    "security-audit": {
      "reviews": ["third-party-integration", "media-streaming"],
      "validates": ["docker-e2e"]
    },
    "docker-e2e": {
      "tests": ["third-party-integration", "media-streaming", "security-audit"],
      "validates": "all_integrations"
    }
  },
  "workflow_integration": {
    "cross_mode_handoffs": {
      "api_integration_to_security": "security_review_required",
      "streaming_to_docker": "e2e_testing_required",
      "security_to_docker": "compliance_validation_required"
    },
    "shared_artifacts": {
      "test_fixtures": [
        "backend-e2e/docker/tmdb",
        "backend-e2e/docker/yts",
        "backend-e2e/docker/trakt",
        "backend/test-fixtures"
      ],
      "type_definitions": "backend/src/types",
      "configuration": "backend/src/config"
    }
  }
}
