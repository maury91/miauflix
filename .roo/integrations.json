{
  "integration_patterns": {
    "http_vcr": {
      "name": "HTTP VCR Testing Integration",
      "description": "Integration pattern for http-vcr testing with fixture analysis and data transformation",
      "configuration": {
        "fixture_directories": [
          "backend/test-fixtures",
          "backend-e2e/docker/tmdb",
          "backend-e2e/docker/yts",
          "backend-e2e/docker/trakt"
        ],
        "vcr_config_path": "backend/src/__test-utils__/http-vcr.config.ts",
        "transformer_directory": "backend/src/__test-utils__/http-vcr-utils"
      },
      "workflow_integration": {
        "test_execution": {
          "development": "record_real_api_calls",
          "ci_testing": "playback_fixtures_with_transformers",
          "production": "neutral_data_only"
        },
        "fixture_management": {
          "generation": "automatic_on_test_run",
          "analysis": "manual_with_tooling",
          "transformation": "automated_with_rules"
        }
      },
      "data_transformation": {
        "content_neutralization": {
          "movie_titles": {
            "strategy": "placeholder_generation",
            "pattern": "English sounding name",
            "preserve_relationships": true
          },
          "torrent_hashes": {
            "strategy": "valid_dummy_generation",
            "format": "sha1_compatible",
            "uniqueness": "maintained"
          },
          "descriptions": {
            "strategy": "generic_content",
            "length_preservation": true,
            "structure_preservation": true
          },
          "poster_urls": {
            "strategy": "placeholder_service",
            "dimensions_preserved": true,
            "format_preserved": true
          }
        },
        "relationship_preservation": {
          "movie_to_torrents": "maintain_associations",
          "season_to_episodes": "preserve_hierarchy",
          "quality_mappings": "keep_structure"
        }
      },
      "testing_patterns": {
        "api_client_tests": {
          "real_api_phase": "record_fixtures",
          "development_phase": "use_recorded_fixtures",
          "ci_phase": "use_transformed_fixtures"
        },
        "integration_tests": {
          "service_layer": "mock_with_realistic_data",
          "e2e_tests": "use_containerized_mocks"
        }
      }
    },
    "typeorm_database": {
      "name": "TypeORM Database Integration",
      "description": "Database management with TypeORM entities and migrations",
      "configuration": {
        "entities_directory": "backend/src/entities",
        "connection_config": "backend/src/database/database.ts"
      },
      "migrations": false,
      "entity_patterns": {
        "media_entities": [
          "movie.entity.ts",
          "tvshow.entity.ts",
          "season.entity.ts",
          "episode.entity.ts",
          "movie-source.entity.ts"
        ],
        "user_entities": ["user.entity.ts", "refresh-token.entity.ts", "trakt-user.entity.ts"],
        "system_entities": [
          "audit-log.entity.ts",
          "sync-state.entity.ts",
          "storage.entity.ts",
          "list.entity.ts",
          "genre.entity.ts"
        ]
      },
      "relationship_management": {
        "one_to_many": {
          "tvshow_seasons": "cascade_operations",
          "season_episodes": "cascade_operations",
          "user_tokens": "cascade_delete"
        },
        "many_to_many": {
          "movie_genres": "junction_table",
          "user_lists": "junction_table"
        }
      },
      "testing_integration": {
        "unit_tests": "in_memory_database",
        "integration_tests": "test_database_container",
        "e2e_tests": "docker_compose_database"
      }
    },
    "docker_containerization": {
      "name": "Docker Containerization Integration",
      "description": "Docker containerization with background process management",
      "configuration": {
        "compose_files": ["docker-compose.prod.yml"],
        "dockerfile_locations": ["backend-e2e/**/*.Dockerfile"],
        "scripts_directory": "scripts"
      },
      "service_architecture": {
        "backend_api": {
          "container_name": "miauflix-backend",
          "health_checks": "api_endpoint_monitoring",
          "dependencies": ["database", "redis"]
        },
        "database": {
          "container_name": "miauflix-postgres",
          "persistence": "volume_mounting",
          "initialization": "migration_scripts"
        },
        "frontend": {
          "container_name": "miauflix-frontend",
          "serving": "nginx_proxy",
          "optimization": "static_asset_caching"
        }
      },
      "background_process_management": {
        "process_tracking": {
          "container_references": "maintain_for_lifecycle",
          "health_monitoring": "continuous",
          "resource_cleanup": "automatic_on_failure"
        },
        "development_workflow": {
          "file_watching": "disabled_in_containers",
          "change_verification": "e2e_tests_required",
          "hot_reload": "not_supported"
        }
      },
      "e2e_integration": {
        "test_environment": {
          "isolation": "per_test_suite",
          "cleanup": "automatic_after_tests",
          "data_seeding": "fixture_based"
        },
        "service_communication": {
          "network_setup": "docker_compose_networks",
          "service_discovery": "container_name_resolution",
          "port_mapping": "dynamic_allocation"
        }
      }
    },
    "external_apis": {
      "name": "External API Integration Patterns",
      "description": "Integration patterns for YTS, TheRARBG, TMDB, and Trakt APIs",
      "services": {
        "yts": {
          "api_client": "backend/src/content-directories/yts/yts.api.ts",
          "types": "backend/src/content-directories/yts/yts.types.ts",
          "utils": "backend/src/content-directories/yts/yts.utils.ts",
          "tracker": "backend/src/content-directories/yts/index.ts",
          "content_type": "movie_torrents",
          "rate_limiting": "required",
          "data_neutralization": {
            "movie_titles": "placeholder_generation",
            "torrent_hashes": "dummy_generation",
            "magnet_links": "sanitization_required"
          }
        },
        "therarbg": {
          "api_client": "backend/src/content-directories/therarbg/therarbg.api.ts",
          "types": "backend/src/content-directories/therarbg/therarbg.types.ts",
          "utils": "backend/src/content-directories/therarbg/therarbg.utils.ts",
          "tracker": "backend/src/content-directories/therarbg/index.ts",
          "content_type": "tv_and_movie_torrents",
          "rate_limiting": "aggressive",
          "data_neutralization": {
            "torrent_names": "title_replacement",
            "tracker_urls": "dummy_trackers",
            "peer_info": "anonymization"
          }
        },
        "tmdb": {
          "content_type": "movie_and_tv_metadata",
          "rate_limiting": "standard",
          "data_neutralization": {
            "plot_summaries": "generic_descriptions",
            "poster_urls": "placeholder_images",
            "backdrop_urls": "placeholder_images"
          }
        },
        "trakt": {
          "content_type": "user_data_and_recommendations",
          "rate_limiting": "standard",
          "data_neutralization": {
            "user_data": "anonymization_required",
            "watch_history": "generic_patterns",
            "recommendations": "neutral_content"
          }
        }
      },
      "common_patterns": {
        "abstract_base": "backend/src/content-directories/content-directory.abstract.ts",
        "error_handling": "standardized_across_services",
        "caching": "response_caching_with_ttl",
        "monitoring": "api_call_tracking"
      },
      "api_utilities": {
        "shared_utilities": ["backend/src/utils/api.util.ts", "backend/src/utils/fetch.util.ts"],
        "rate_limiting": "centralized_implementation",
        "authentication": "service_specific_handling"
      }
    },
    "security_middleware": {
      "name": "Security Middleware Integration",
      "description": "Security middleware for authentication, authorization, and audit logging",
      "middleware_stack": {
        "authentication": {
          "file": "backend/src/middleware/auth.middleware.ts",
          "strategy": "jwt_with_refresh_tokens",
          "integration_points": ["protected_routes", "user_context"]
        },
        "audit_logging": {
          "file": "backend/src/middleware/audit-log.middleware.ts",
          "scope": "all_authenticated_requests",
          "storage": "database_audit_log_entity"
        },
        "rate_limiting": {
          "file": "backend/src/middleware/rate-limit.middleware.ts",
          "strategy": "sliding_window",
          "storage": "in_memory_with_redis_backup"
        }
      },
      "authentication_flow": {
        "login": "jwt_token_generation",
        "refresh": "refresh_token_rotation",
        "logout": "token_invalidation",
        "session_management": "stateless_jwt_based"
      },
      "authorization_patterns": {
        "role_based": "user_entity_roles",
        "resource_based": "context_dependent",
        "api_key": "service_to_service"
      },
      "security_headers": {
        "cors": "configured_for_frontend",
        "csp": "content_security_policy",
        "helmet": "security_headers_middleware"
      }
    },
    "streaming_optimization": {
      "name": "Streaming Performance Integration",
      "description": "Streaming optimization with chunk stores and WebTorrent",
      "chunk_store_integration": {
        "implementation": "backend/src/chunk-stores/encrypted-chunk-store/encrypted-chunk-store.ts",
        "testing": "backend/src/chunk-stores/encrypted-chunk-store/encrypted-chunk-store.test.ts",
        "storage_strategy": "filesystem_based",
        "optimization": "background_processing"
      },
      "webtorrent_integration": {
        "type_definitions": "backend/src/types/webtorrent.d.ts",
        "streaming_strategy": "progressive_download",
        "performance_optimization": "chunk_prioritization"
      },
      "metadata_services": {
        "content_directory_service": "backend/src/services/source-metadata/content-directory.service.ts",
        "source_service": "backend/src/services/source/source.service.ts",
        "extraction_utils": [
          "backend/src/utils/source-metadata/extract-quality.ts",
          "backend/src/utils/source-metadata/extract-video-codec.ts",
          "backend/src/utils/source-metadata/extract-tv-data.ts"
        ]
      },
      "performance_patterns": {
        "background_processing": "async_operations",
        "caching": "metadata_and_chunks",
        "prioritization": "user_requested_content",
        "cleanup": "automated_old_content_removal"
      }
    }
  },
  "integration_dependencies": {
    "http_vcr_to_external_apis": {
      "dependency_type": "testing_infrastructure",
      "relationship": "vcr_records_api_calls"
    },
    "typeorm_to_security": {
      "dependency_type": "data_persistence",
      "relationship": "entities_store_security_data"
    },
    "docker_to_all": {
      "dependency_type": "runtime_environment",
      "relationship": "containerizes_all_services"
    },
    "external_apis_to_streaming": {
      "dependency_type": "content_source",
      "relationship": "apis_provide_streaming_content"
    },
    "security_to_all": {
      "dependency_type": "cross_cutting_concern",
      "relationship": "protects_all_endpoints"
    }
  },
  "configuration_management": {
    "environment_variables": {
      "development": ".env.development",
      "production": ".env.production",
      "testing": "environment_specific"
    },
    "configuration_files": {
      "typescript": "tsconfig.json",
      "jest": "jest.config.js",
      "eslint": "eslint.config.js",
      "prettier": ".prettierrc"
    },
    "docker_configuration": {
      "compose": "docker-compose.*.yml",
      "dockerfiles": "service_specific",
      "volumes": "persistent_data_storage"
    }
  },
  "monitoring_and_observability": {
    "logging": {
      "application_logs": "structured_logging",
      "audit_logs": "database_stored",
      "error_tracking": "centralized_error_handling"
    },
    "metrics": {
      "api_performance": "response_time_tracking",
      "streaming_metrics": "chunk_delivery_performance",
      "security_metrics": "failed_authentication_tracking"
    },
    "health_checks": {
      "service_health": "endpoint_based",
      "database_health": "connection_monitoring",
      "external_api_health": "periodic_checks"
    }
  }
}
