{
  "automated_workflows": {
    "third_party_api_integration": {
      "name": "Third-Party API Integration Workflow",
      "description": "Complete workflow for integrating new external APIs with http-vcr testing",
      "trigger_conditions": [
        "new_content_directory_request",
        "api_integration_task",
        "external_service_addition"
      ],
      "steps": [
        {
          "step": "api_analysis",
          "description": "Analyze API documentation and requirements",
          "actions": [
            "review_api_documentation",
            "identify_rate_limits",
            "determine_authentication_requirements",
            "map_data_structure"
          ],
          "outputs": ["api_analysis_report"]
        },
        {
          "step": "create_types_and_client",
          "description": "Create TypeScript types and API client",
          "actions": [
            "create_api_types_file",
            "implement_api_client_class",
            "add_error_handling",
            "implement_rate_limiting"
          ],
          "file_patterns": [
            "backend/src/content-directories/{service}/index.ts",
            "backend/src/content-directories/{service}/{service}.types.ts",
            "backend/src/content-directories/{service}/{service}.api.ts",
            "backend/src/content-directories/{service}/{service}.utils.ts"
          ],
          "dependencies": ["api_analysis"]
        },
        {
          "step": "write_initial_test",
          "description": "Write test with real API call to generate fixtures",
          "actions": [
            "create_test_file_with_real_api_calls",
            "configure_http_vcr_recording",
            "add_test_assertions",
            "document_expected_behavior"
          ],
          "file_patterns": ["backend/src/content-directories/{service}/{service}.api.test.ts"],
          "dependencies": ["create_types_and_client"]
        },
        {
          "step": "generate_fixtures",
          "description": "Run tests to generate HTTP fixtures",
          "actions": [
            "run_test_with_real_api",
            "capture_http_responses",
            "save_fixtures_to_test_directory"
          ],
          "commands": ["npm run test:backend -- {service}.api.test.ts"],
          "outputs": ["http_fixtures"],
          "dependencies": ["write_initial_test"]
        },
        {
          "step": "analyze_fixtures",
          "description": "Analyze fixture data structure and identify copyrighted content",
          "actions": [
            "examine_response_structure",
            "identify_copyrighted_fields",
            "map_data_relationships",
            "document_transformation_requirements"
          ],
          "analysis_focus": [
            "movie_titles",
            "torrent_hashes",
            "poster_urls",
            "plot_descriptions",
            "release_info"
          ],
          "dependencies": ["generate_fixtures"]
        },
        {
          "step": "create_transformers",
          "description": "Create data transformers for neutral content",
          "actions": [
            "implement_data_sanitizers",
            "create_neutral_content_generators",
            "preserve_data_relationships",
            "add_transformation_tests"
          ],
          "file_patterns": ["backend/src/__test-utils__/http-vcr-utils/{service}.transformer.ts"],
          "transformation_rules": {
            "movie_titles": "generate_neutral_titles",
            "descriptions": "create_generic_descriptions",
            "poster_urls": "use_placeholder_images",
            "torrent_names": "replace_old_title_with_new_title",
            "torrent_hashes": "generate_valid_dummy_hashes"
          },
          "dependencies": ["analyze_fixtures"]
        },
        {
          "step": "implement_neutralization",
          "description": "Implement content neutralization in production code",
          "actions": [
            "integrate_transformers_into_api_client",
            "add_environment_based_switching",
            "update_tests_for_neutral_data",
            "verify_compliance"
          ],
          "environment_handling": {
            "development": "use_real_api_with_vcr",
            "testing": "use_fixtures_with_transformers",
            "production": "use_neutral_transformers"
          },
          "dependencies": ["create_transformers"]
        },
        {
          "step": "integration_testing",
          "description": "Run E2E tests to verify integration",
          "actions": [
            "run_docker_compose_tests",
            "verify_service_integration",
            "test_data_flow",
            "validate_performance"
          ],
          "commands": ["npm run test:backend:e2e", "npm run test:backend:e2e:dev"],
          "dependencies": ["implement_neutralization"]
        }
      ],
      "compliance_checks": {
        "copyright_protection": "required",
        "data_neutralization": "required",
        "relationship_preservation": "required",
        "performance_standards": "required"
      }
    },
    "e2e_testing_lifecycle": {
      "name": "E2E Testing with Docker Compose Lifecycle",
      "description": "Complete E2E testing workflow with proper Docker management",
      "trigger_conditions": [
        "code_changes_requiring_verification",
        "integration_testing_request",
        "deployment_preparation"
      ],
      "steps": [
        {
          "step": "environment_preparation",
          "description": "Prepare Docker compose environment",
          "actions": [
            "validate_docker_compose_files",
            "check_service_dependencies",
            "verify_environment_variables",
            "cleanup_previous_containers"
          ],
          "commands": ["npm run docker:cleanup"],
          "prerequisites": ["docker_available", "compose_files_valid"]
        },
        {
          "step": "service_startup",
          "description": "Start all required services",
          "actions": [
            "start_docker_compose_services",
            "wait_for_service_readiness",
            "verify_service_health",
            "establish_service_connectivity"
          ],
          "commands": ["npm run start:backend:e2e"],
          "health_checks": [
            "database_connectivity",
            "api_service_readiness",
            "external_service_mocks"
          ],
          "dependencies": ["environment_preparation"]
        },
        {
          "step": "test_execution",
          "description": "Execute E2E tests against running services",
          "actions": [
            "run_integration_tests",
            "verify_api_endpoints",
            "test_data_persistence",
            "validate_service_interactions"
          ],
          "commands": ["npm run test:backend:e2e:dev"],
          "test_categories": [
            "api_integration_tests",
            "database_integration_tests",
            "external_service_integration_tests",
            "authentication_flow_tests"
          ],
          "dependencies": ["service_startup"]
        },
        {
          "step": "result_analysis",
          "description": "Analyze test results and generate reports",
          "actions": [
            "collect_test_results",
            "analyze_performance_metrics",
            "identify_failure_patterns",
            "generate_coverage_reports"
          ],
          "outputs": ["test_results_report", "performance_metrics", "coverage_analysis"],
          "dependencies": ["test_execution"]
        },
        {
          "step": "cleanup",
          "description": "Clean up Docker resources and temporary data",
          "actions": [
            "stop_docker_services",
            "remove_test_containers",
            "clean_temporary_volumes",
            "reset_test_databases"
          ],
          "commands": ["npm run docker:cleanup"],
          "cleanup_targets": [
            "test_containers",
            "temporary_volumes",
            "test_networks",
            "orphaned_processes"
          ],
          "dependencies": ["result_analysis"]
        }
      ],
      "background_process_management": {
        "track_processes": true,
        "auto_cleanup_on_failure": true,
        "resource_monitoring": true,
        "process_references": "maintain_for_debugging"
      }
    },
    "security_compliance_audit": {
      "name": "Security Compliance and Audit Workflow",
      "description": "Comprehensive security audit for authentication and encryption features",
      "trigger_conditions": [
        "security_feature_changes",
        "authentication_modifications",
        "encryption_updates",
        "compliance_review_required"
      ],
      "steps": [
        {
          "step": "authentication_audit",
          "description": "Audit authentication flow and security",
          "actions": [
            "review_jwt_implementation",
            "validate_refresh_token_security",
            "check_password_handling",
            "audit_session_management"
          ],
          "security_checks": [
            "jwt_secret_strength",
            "token_expiration_policies",
            "refresh_token_rotation",
            "brute_force_protection"
          ],
          "file_targets": [
            "backend/src/middleware/auth.middleware.ts",
            "backend/src/entities/user.entity.ts",
            "backend/src/entities/refresh-token.entity.ts"
          ]
        },
        {
          "step": "encryption_audit",
          "description": "Audit encryption implementation and standards",
          "actions": [
            "validate_encryption_algorithms",
            "check_key_management",
            "audit_data_at_rest_encryption",
            "verify_transmission_security"
          ],
          "encryption_standards": {
            "algorithm": "AES-256-GCM",
            "key_rotation": "required",
            "salt_generation": "secure_random",
            "iv_handling": "unique_per_operation"
          }
        },
        {
          "step": "rate_limiting_audit",
          "description": "Audit rate limiting effectiveness",
          "actions": [
            "review_rate_limit_policies",
            "test_rate_limit_enforcement",
            "validate_bypass_protection",
            "check_distributed_rate_limiting"
          ],
          "file_targets": ["backend/src/middleware/rate-limit.middleware.ts"]
        },
        {
          "step": "audit_logging_review",
          "description": "Review audit logging implementation",
          "actions": [
            "validate_audit_trail_completeness",
            "check_log_integrity",
            "review_sensitive_data_handling",
            "verify_compliance_logging"
          ],
          "file_targets": [
            "backend/src/middleware/audit-log.middleware.ts",
            "backend/src/entities/audit-log.entity.ts"
          ],
          "logging_requirements": {
            "authentication_events": "required",
            "authorization_failures": "required",
            "data_access": "required",
            "configuration_changes": "required"
          }
        },
        {
          "step": "vulnerability_assessment",
          "description": "Assess for common security vulnerabilities",
          "actions": [
            "owasp_top_10_check",
            "dependency_vulnerability_scan",
            "sql_injection_testing",
            "xss_protection_validation"
          ],
          "vulnerability_categories": [
            "injection_attacks",
            "broken_authentication",
            "sensitive_data_exposure",
            "xml_external_entities",
            "broken_access_control"
          ]
        },
        {
          "step": "compliance_validation",
          "description": "Validate compliance with security standards",
          "actions": [
            "gdpr_compliance_check",
            "streaming_security_validation",
            "api_security_standards",
            "data_protection_verification"
          ],
          "compliance_standards": [
            "GDPR",
            "OWASP_ASVS",
            "ISO_27001",
            "NIST_Cybersecurity_Framework"
          ]
        }
      ]
    },
    "content_directory_integration": {
      "name": "Content Directory Integration Workflow",
      "description": "Specialized workflow for integrating content sources with streaming optimization",
      "trigger_conditions": [
        "new_content_source_integration",
        "streaming_optimization_request",
        "metadata_enrichment_needed"
      ],
      "steps": [
        {
          "step": "content_source_analysis",
          "description": "Analyze content source capabilities and requirements",
          "actions": [
            "evaluate_api_capabilities",
            "assess_content_quality",
            "determine_metadata_completeness",
            "identify_streaming_formats"
          ]
        },
        {
          "step": "metadata_extraction_setup",
          "description": "Setup metadata extraction and enrichment",
          "actions": [
            "implement_quality_extraction",
            "setup_video_codec_detection",
            "configure_tv_data_extraction",
            "implement_source_metadata_service"
          ],
          "file_patterns": [
            "backend/src/utils/source-metadata/extract-*.ts",
            "backend/src/services/source-metadata/*.ts"
          ]
        },
        {
          "step": "streaming_optimization",
          "description": "Optimize for streaming performance",
          "actions": [
            "configure_chunk_stores",
            "setup_webtorrent_integration",
            "implement_background_processing",
            "optimize_content_delivery"
          ],
          "file_patterns": ["backend/src/chunk-stores/**/*.ts", "backend/src/types/webtorrent.d.ts"]
        },
        {
          "step": "integration_testing",
          "description": "Test content directory integration",
          "actions": [
            "test_content_discovery",
            "verify_metadata_extraction",
            "validate_streaming_performance",
            "test_error_handling"
          ],
          "commands": ["npm run test:backend", "npm run test:backend:e2e"]
        }
      ]
    }
  },
  "workflow_orchestration": {
    "parallel_workflows": {
      "api_integration_with_security": ["third_party_api_integration", "security_compliance_audit"],
      "content_integration_with_e2e": ["content_directory_integration", "e2e_testing_lifecycle"]
    },
    "sequential_dependencies": {
      "before_deployment": ["security_compliance_audit", "e2e_testing_lifecycle"],
      "after_api_integration": ["content_directory_integration", "e2e_testing_lifecycle"]
    },
    "conditional_triggers": {
      "security_changes": "security_compliance_audit",
      "api_changes": "third_party_api_integration",
      "streaming_changes": "content_directory_integration",
      "integration_changes": "e2e_testing_lifecycle"
    }
  }
}
